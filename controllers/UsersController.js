/**
 * Inside controllers, add a file UsersController.js that contains the new endpoint:

POST /users should create a new user in DB:

To create a user, you must specify an email and a password
If the email is missing, return an error Missing email with a status code 400
If the password is missing, return an error Missing password with a status code 400
If the email already exists in DB, return an error Already exist with a status code 400
The password must be stored after being hashed in SHA1
The endpoint is returning the new user with only the email and the id (auto generated by MongoDB) with a status code 201
The new user must be saved in the collection users:
email: same as the value received
password: SHA1 value of the value received
 */

const crypto = require('crypto');
const Bull = require('bull');
const dbClient = require('../utils/db');
const redisClient = require('../utils/redis');

class UsersController {
  static async postNew(req, res) {
    const { email, password } = req.body;
    if (!email) return res.status(400).send({ error: 'Missing email' });
    if (!password) return res.status(400).send({ error: 'Missing password' });

    const user = await dbClient.users.findOne({ email });
    if (user) return res.status(400).send({ error: 'Already exist' });

    const hashedPassword = crypto
      .createHash('sha1')
      .update(password)
      .digest('hex');
    const result = await dbClient.users.insertOne({
      email,
      password: hashedPassword,
    });

    return res.status(201).send({ email, id: result.insertedId });
  }
}

module.exports = UsersController;
